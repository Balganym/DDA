				Performance and Turning

Admin     	Developer  	Analytics	
   |		    |
      Performance



Performance:

DB
LOG(history of transactions)

I/O operations (запросы хранятся на оперативке, чтобы след раз быстро отвечать(а вообще они хранятся на диске)) (если память заполнена он не добавит новый, или удалит старый)

—————————————————————————————————————————————————————————————————————————————————————

INDEX:
запросы в памяти хранятся в виде станиц(они связаны(linked list))
указатель(и есть то что хранится)
что то вытаскиваем(scan)

INDEX - поиск по B_TREE дереву
индексы тоже хранятся как  страницы
ЛИСТЬЯ хранят указатель(RP)  non-clastered
lcaster в листьях хранятся сами страницы
PRIMARY KE =зто clustered

Операция seek - coLUMN

 Create index ix- on t1(f2) -  (f2 просто колонку так назвали)


когда что то создаем и нужно поменять дерево - дерево перестраивается (это называется - index rebuild)

(index - влияет на производительность)


Индексы могут содержать несколько  колонок(multicolumn)
или создать один индекс или двойной индекс ???

как работает like ‘xxx%’ чтобы работало быстрее нужно писать больше символов перед ‘%’

если какая та функция медленно работает мы можем повесить INDEX

COMPUTED COLUMN - результат функции будет подвешиваться (н/р если substring(f1) если он выполнится то f2 можно не считать, он сам все сделает)

covering index
……… include z,y…

Select y,z…
where x = ….  
тогда он будет y,z хранить прям в дереве


HINT (даем подсказку БД чтоб он не тратил времени) - пишется через WITH
н/р:  int with (inx…), или hint with (nolock) (не блокировать для него ничего)

—————————————————————————————————————————————————————————————————————————————————————
QUERY PLAN - типа дебаг

rule based    /    statistic based


rule based: задаем алгоритм (основываясь на правилах БД)
statistic based: каждый раз будет что то пробовать, делать выводы и след раз работать на основе статистики

команда SET как SEEK или SCAN

1) Query Plan????(не точно)
2) даем hint
3) настраиваем статистику


_____________________________________________________________________________________

1) Query Plan
2) DMV - data management views (полезны для админов, хранят все запросы(то/е SELECT, откуда он пришел и т д))(хороший тул для нахождения bottleneck) - системные вьюшки
3) Profiler (посмотреть что происходит в самом корне он перехватывает все обращения к БД, можно просмотреть все в режиме реального времени можно задать что именно показывать) - отдельная программа
4) Analyzer - (даем запрос, и он показывает при создании какого индекса запрос будет работать быстрее) - отдельная программа (перехватывает сессии)



                                                                    Balganym Tulebayeva
                                                                    Tue 10:00 -12:00
                                                                    Practice 10
1.  
  a) 
    CREATE OR REPLACE PACKAGE  job_pkg
    IS
      PROCEDURE add_job (
        p_jobid IN jobs.job_id%TYPE,
        p_jobtitle IN  jobs.job_title%TYPE);
      PROCEDURE upd_job(
        p_jobid  IN jobs.job_id%TYPE,
        p_jobtitle IN jobs.job_title%TYPE);
      PROCEDURE del_job(
        p_jobid IN jobs.job_id%TYPE);
      FUNCTION get_job(
        p_jobid IN jobs.job_id%TYPE)
      RETURN jobs.job_title%TYPE;
    END job_pkg;
    /
    SHOW ERRORS;

  b) 
    CREATE OR REPLACE PACKAGE BODY job_pkg
      IS
        PROCEDURE add_job (
          p_jobid IN jobs.job_id%TYPE,
          p_jobtitle IN jobs.job_title%TYPE)
      IS
      BEGIN
        INSERT INTO jobs(job_id, job_title) VALUES (p_jobid, p_jobtitle);
      COMMIT;
      END add_job;

      PROCEDURE del_job(
        p_jobid IN jobs.job_id%TYPE)
      IS
      BEGIN
        DELETE FROM jobs WHERE job_id = p_jobid;
        IF SQL%NOTFOUND THEN 
          RAISE_APPLICATION_ERROR(-20203, ‘Deletion cannot be performed’);
        END IF;
      END del_job;

      PROCEDURE upd_job (
        p_jobid IN jobs.job_id%TYPE,
        p_jobtitle IN jobs.job_title%TYPE)
      IS
      BEGIN
        UPDATE jobs SET job_title = p_jobtitle WHERE job_id = p_jobid;
        IF SQL%NOTFOUND THEN
          RAISE_APPLICATION_ERROR(-20202, ‘Update cannot be performed’);
        END IF;
      END upd_job;

      FUNCTION get_job (
        IN jobs.job_id%TYPE) RETURN jobs.job_title%TYPE
        IS
          v_jobtitle  jobs.job_title%TYPE;
      BEGIN
        SELECT job_title INTO v_jobtitle FROM jobs WHERE job_id = p_jobid;
        RETURN v_jobtitle;
      END get_job;
    END job_pkg;
    /

c)  
  SYSTEMS ANALYST
  EXECUTE job_pkg.add_job(‘IT_SYSAN’, ‘Systems Analyst’);

2.
  CREATE OR REPLACE PACKAGE emp_pkg 
  IS
    PROCEDURE add_employee(
      p_first_name employees.first_name%TYPE,
      p_last_name employees.last_name%TYPE,
      p_email employees.email%TYPE,
      p_job employees.job_id%TYPE DEFAULT 'SA_REP',
      p_mgr employees.manager_id%TYPE DEFAULT 145,
      p_sal employees.salary%TYPE DEFAULT 1000,
      p_comm employees.commission_pct%TYPE DEFAULT 0,
      p_depid employees.department_id%TYPE DEFAULT 30);
    PROCEDURE get_employee(
      p_empid IN employees.employee_id%TYPE,
      p_sal OUT employees.salary%TYPE,
      p_job OUT employees.job_id%TYPE);
  END emp_pkg;
  /

  CREATE OR REPLACE PACKAGE BODY emp_pkg 
    IS
      FUNCTION valid_deptid(p_depid IN departments.department_id%TYPE) 
      RETURN BOOLEAN
      IS 
        v_temp PLS_INTEGER;
      BEGIN
        SELECT 1 INTO v_temp FROM departments WHERE department_id = p_depid;
        RETURN TRUE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN 
        RETURN FALSE;
      END valid_deptid;

      PROCEDURE add_employee(
        p_first_name employees.first_name%TYPE,
        p_last_name employees.last_name%TYPE,
        p_email employees.email%TYPE,
        p_job employees.job_id%TYPE DEFAULT 'SA_REP',
        p_mgr employees.manager_id%TYPE DEFAULT 145,
        p_sal employees.salary%TYPE DEFAULT 1000,
        p_comm employees.commission_pct%TYPE DEFAULT 0,
        p_depid employees.department_id%TYPE DEFAULT 30)
      IS
        BEGIN
          IF valid_deptid(p_depid) THEN
            INSERT INTO employees(employee_id, first_name, last_name, email, job_id, 
		manager_id, hire_date, salary, commission_pct, department_id)
            VALUES (employee_sequence.NEXTVAL, p_first_name, p_last_name, p_email, p_job, 
		p_mgr, TRUNC(SYSDATE), p_sal, p_comm, p_depid);
          ELSE
            RAISE_APPLICATION_ERROR (-20204, 'Invalid department ID');
          END IF;
      END add_employee;
      /

      PROCEDURE get_employee(
        p_empid IN employees.employee_id%TYPE,
        p_sal OUT employees.salary%TYPE,
        p_job OUT employees.job_id%TYPE) 
      IS
        BEGIN
          SELECT salary, job_id INTO p_sal, p_job FROM employees
          WHERE employee_id = p_empid;
      END get_employee;
    END emp_pkg;
    /

b)
  EXECUTE emp_pkg.add_employee(‘Jane’, ‘Harris’, ‘jharris@gmail.com’, p_depid => 15);

c)
  EXECUTE emp_pkg.add_employee (‘David’, ‘Smith’, ‘dsmith@gmail.com’, p_depid = > 80);






  

